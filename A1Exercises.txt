--------------------------------------------
1.3.1 Exercises, p 14

1. Using the touch command, create empty files called foo and bar in
your repository directory.

2. By using git add foo, add foo to the staging area. Confirm with git
status that it worked.

3. Using git commit -m and an appropriate message, add foo to the repository.

4. By using git add bar, add bar to the staging area. Confirm with git
status that it worked.

5. Now run git commit without the -m option. Use your Vim knowledge
to add the message “Add bar”, save, and quit.

6. Using git log, confirm that the commits made in the previous exercises
worked correctly.

*** output for item 6 *** 

commit ead90ec27ed8543c939bd15a5f1bc6dc0757d46a (HEAD -> master)
Author: Eddie C. <edimc2000@gmail.com>
Date:   Sun Oct 26 12:20:43 2025 -0500

    Add bar

commit cf3136addec8ff98237035b2c4368e09de300e59
Author: Eddie C. <edimc2000@gmail.com>
Date:   Sun Oct 26 12:20:27 2025 -0500

    initial commit, added file: foo

--------------------------------------------

1.4.1 Exercises, p 16

1. Use touch to create an empty file called baz. What happens if you run
git commit -am "Add baz"?

*** output *** 
On branch master
Untracked files:
  (use "git add <file>..." to include in what will be committed)
        .gitignore
        baz

nothing added to commit but untracked files present (use "git add" to track)

*** answer: no files were commited since no files were staged  ****


2. Add baz to the staging area using git add -A, then commit with the
message "Add bazz".

*** answer: all files are tracked and staged, files were commited to local repo  ****

3. Realizing there’s a typo in your commit message, change bazz to baz
using git commit --amend.

--------------------------------------------

1.5.1 Exercises, p23

1. The git log command shows only the commit messages, which makes
for a compact display but isn’t particularly detailed. Verify by running
git log -p that the -p option shows the full diffs represented by each
commit.

*** output  for git log -p *** 

commit ced60338b2ab835055b963ab34a472c2b3874ac5
Author: Eddie C. <edimc2000@gmail.com>
Date:   Sun Oct 26 12:28:58 2025 -0500

    Add baz

diff --git a/.gitignore b/.gitignore
new file mode 100644
index 0000000..63515cb
--- /dev/null
+++ b/.gitignore
@@ -0,0 +1 @@
+1.x*.txt
diff --git a/baz b/baz
new file mode 100644
index 0000000..e69de29

commit ead90ec27ed8543c939bd15a5f1bc6dc0757d46a
Author: Eddie C. <edimc2000@gmail.com>
Date:   Sun Oct 26 12:20:43 2025 -0500

    Add bar

diff --git a/bar b/bar
new file mode 100644
index 0000000..efe82b7
--- /dev/null
+++ b/bar
@@ -0,0 +1 @@
+bar 

commit cf3136addec8ff98237035b2c4368e09de300e59
Author: Eddie C. <edimc2000@gmail.com>
Date:   Sun Oct 26 12:20:27 2025 -0500

    initial commit, added file: foo

diff --git a/foo b/foo
new file mode 100644
index 0000000..257cc56
--- /dev/null
+++ b/foo
@@ -0,0 +1 @@
+foo


*** output  for git log *** 

commit ced60338b2ab835055b963ab34a472c2b3874ac5
Author: Eddie C. <edimc2000@gmail.com>
Date:   Sun Oct 26 12:28:58 2025 -0500

    Add baz

commit ead90ec27ed8543c939bd15a5f1bc6dc0757d46a
Author: Eddie C. <edimc2000@gmail.com>
Date:   Sun Oct 26 12:20:43 2025 -0500

    Add bar

commit cf3136addec8ff98237035b2c4368e09de300e59
Author: Eddie C. <edimc2000@gmail.com>
Date:   Sun Oct 26 12:20:27 2025 -0500

    initial commit, added file: foo


2. Under the h1 tag in Listing 1.6, use the p tag to add a paragraph consisting
of the line “Call me Ishmael.” The result should appear as in
Figure 1.6. (Don’t worry if you get stuck; we’ll incorporate the answer
to this exercise in Section 1.6 (Listing 1.8).)


--------------------------------------------
1.6.1 Exercises, p 28

1. Add the title “A whale of a greeting” to index.html. Browsers differ
in how they display titles; the result in Safari is shown in Figure 1.8. (As
of this writing, Safari doesn’t display the title unless there are at least two
tabs, which is why there’s a second tab in Figure 1.8.)

2. Commit the new title with a commit message of your choice. Verify using
git log -p that the change was committed as expected.

*** Output ***
commit 6a995e3cdef249dcf77025fd96fddea28e9fad06
Author: Eddie C. <edimc2000@gmail.com>
Date:   Sun Oct 26 12:47:33 2025 -0500

    1.6.1-2 Added a page title

commit 88f131759622623ec72f6e6ead78fc536b866159
Author: Eddie C. <edimc2000@gmail.com>
Date:   Sun Oct 26 12:44:39 2025 -0500

    Add some HTML structure

3. By pasting the contents of Listing 1.8 into an HTML validator, verify that
it is not (quite) a valid web page.


4. Using the validator, verify that the current index.html (with nonblank
page title) is valid.

--------------------------------------------

2.1 GitHub Account 

GitHub Username : edimc2000

origin  git@github.com:edimc2000/vca1.git (fetch)
origin  git@github.com:edimc2000/vca1.git (push)


--------------------------------------------

2.2.1 Exercises

1. On the GitHub page for your repo, click on “Commits” to see a list of
your commits. Confirm that they match the results of running git log
on your local system.

2. At GitHub, click on the commit for adding HTML structure (Listing 1.10).
Verify that the diff for the commit agrees with the one shown in Listing
1.9.

3. In honor of shipping your first Git repo, drink a celebratory beverage of
your choice (Figure 2.7).4

--------------------------------------------

2.3.1 Exercises
1. Using the Markdown shown in Listing 2.3, add a line at the end of the
README with a link to the official Git documentation.